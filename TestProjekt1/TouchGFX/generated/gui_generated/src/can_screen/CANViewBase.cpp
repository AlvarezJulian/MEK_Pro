/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/can_screen/CANViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

CANViewBase::CANViewBase() :
    buttonCallback(this, &CANViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &CANViewBase::sliderValueChangedCallbackHandler),
    radioButtonSelectedCallback(this, &CANViewBase::radioButtonSelectedCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box1);

    BackButton.setXY(700, 14);
    BackButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUISH3_ID), touchgfx::Bitmap(BITMAP_BLUISH3_ID));
    BackButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_I7JU));
    BackButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    BackButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    BackButton.setAction(buttonCallback);
    add(BackButton);

    textArea1.setXY(9, 0);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(135, 205, 75));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QGL7));
    add(textArea1);

    Min_1.setPosition(83, 147, 31, 25);
    Min_1.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
    Min_1.setLinespacing(0);
    Min_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7HOG));
    add(Min_1);

    Max_1.setPosition(692, 147, 76, 25);
    Max_1.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
    Max_1.setLinespacing(0);
    Max_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UGN8));
    add(Max_1);

    SliderValue.setPosition(352, 147, 76, 25);
    SliderValue.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
    SliderValue.setLinespacing(0);
    Unicode::snprintf(SliderValueBuffer, SLIDERVALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AQHC).getText());
    SliderValue.setWildcard(SliderValueBuffer);
    SliderValue.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8I9W));
    add(SliderValue);

    Slider.setXY(61, 198);
    Slider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_INDICATORS_SLIDER_ROUND_NOB_ID));
    Slider.setupHorizontalSlider(2, 22, 0, 0, 621);
    Slider.setValueRange(0, 100);
    Slider.setValue(50);
    Slider.setNewValueCallback(sliderValueChangedCallback);
    add(Slider);

    radioButtonGroup1.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
    
    Local.setXY(170, 295);
    Local.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_INACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_ACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_NORMAL_ID));
    Local.setSelected(false);
    Local.setDeselectionEnabled(false);
    radioButtonGroup1.add(Local);
    add(Local);

    Remote.setXY(170, 370);
    Remote.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_INACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_ACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_NORMAL_ID));
    Remote.setSelected(false);
    Remote.setDeselectionEnabled(false);
    radioButtonGroup1.add(Remote);
    add(Remote);

    textArea2.setXY(50, 305);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UXGD));
    add(textArea2);

    textArea3.setXY(50, 380);
    textArea3.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
    textArea3.setLinespacing(0);
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9JP9));
    add(textArea3);

    box2.setPosition(318, 330, 147, 50);
    box2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(box2);

    CANRx.setPosition(324, 344, 133, 26);
    CANRx.setColor(touchgfx::Color::getColorFromRGB(0, 0, 255));
    CANRx.setLinespacing(0);
    CANRxBuffer[0] = 0;
    CANRx.setWildcard(CANRxBuffer);
    CANRx.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DJXK));
    add(CANRx);
}

CANViewBase::~CANViewBase()
{

}

void CANViewBase::setupScreen()
{

}

void CANViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &BackButton)
    {
        //GooSelect
        //When BackButton clicked change screen to Select
        //Go to Select with no screen transition
        application().gotoSelectScreenNoTransition();
    }
}

void CANViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &Slider)
    {
        //SliderChanged
        //When Slider value changed execute C++ code
        //Execute C++ code
        Unicode::snprintf(SliderValueBuffer, sizeof(SliderValue), "%d", value);
        	SliderValue.invalidate();
        //CANSliderChanged
        //When Slider value changed call virtual function
        //Call CANSliderChanged
        CANSliderChanged(value);
    }
}

void CANViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &Local)
    {
        //Local
        //When Local selected call virtual function
        //Call Local_Selected
        Local_Selected();
    }
    if (&src == &Remote)
    {
        //Remote
        //When Remote selected call virtual function
        //Call Remote_Selected
        Remote_Selected();
    }
}
