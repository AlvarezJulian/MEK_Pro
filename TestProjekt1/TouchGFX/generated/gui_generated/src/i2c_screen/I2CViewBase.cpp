/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/i2c_screen/I2CViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

I2CViewBase::I2CViewBase() :
    buttonCallback(this, &I2CViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box1);

    BackButton.setXY(700, 14);
    BackButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUISH3_ID), touchgfx::Bitmap(BITMAP_BLUISH3_ID));
    BackButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_513R));
    BackButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    BackButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    BackButton.setAction(buttonCallback);
    add(BackButton);

    textArea1.setXY(7, 0);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 195, 255));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SAS2));
    add(textArea1);

    CountUpButton.setXY(257, 281);
    CountUpButton.setBitmaps(touchgfx::Bitmap(BITMAP_UP_BTN_ID), touchgfx::Bitmap(BITMAP_UP_BTN_PRESSED_ID));
    CountUpButton.setAction(buttonCallback);
    add(CountUpButton);

    CountDownButton.setXY(257, 379);
    CountDownButton.setBitmaps(touchgfx::Bitmap(BITMAP_DOWN_BTN_ID), touchgfx::Bitmap(BITMAP_DOWN_BTN_PRESSED_ID));
    CountDownButton.setAction(buttonCallback);
    add(CountDownButton);

    ManualReadButton.setXY(572, 374);
    ManualReadButton.setBitmaps(touchgfx::Bitmap(BITMAP_LIGHTBLUE1_ID), touchgfx::Bitmap(BITMAP_GRAY1_ID));
    ManualReadButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_KEVK));
    ManualReadButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ManualReadButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ManualReadButton.setAction(buttonCallback);
    add(ManualReadButton);

    ContinuousReadOnOff.setXY(54, 388);
    ContinuousReadOnOff.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
    ContinuousReadOnOff.setAction(buttonCallback);
    add(ContinuousReadOnOff);

    textArea2.setPosition(569, 334, 172, 30);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W46J));
    add(textArea2);

    ContReadText.setPosition(32, 334, 172, 30);
    ContReadText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ContReadText.setLinespacing(0);
    ContReadText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_42DY));
    add(ContReadText);

    image1.setXY(400, 281);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_ID));
    add(image1);

    ReadTemperature.setPosition(230, 131, 411, 102);
    ReadTemperature.setColor(touchgfx::Color::getColorFromRGB(255, 145, 0));
    ReadTemperature.setLinespacing(0);
    ReadTemperatureBuffer[0] = 0;
    ReadTemperature.setWildcard(ReadTemperatureBuffer);
    ReadTemperature.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XC7U));
    add(ReadTemperature);

    SamplesPerSecond.setPosition(430, 321, 92, 74);
    SamplesPerSecond.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    SamplesPerSecond.setLinespacing(0);
    Unicode::snprintf(SamplesPerSecondBuffer, SAMPLESPERSECOND_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RJNV).getText());
    SamplesPerSecond.setWildcard(SamplesPerSecondBuffer);
    SamplesPerSecond.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5YXF));
    add(SamplesPerSecond);

    ModalWindow.setBackground(touchgfx::BitmapId(BITMAP_MY_MODAL_BACKGROUND_ID), 230, 120);
    ModalWindow.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ModalWindow.setShadeAlpha(150);
    ModalWindow.hide();
    CloseModalWindowButton.setXY(237, 19);
    CloseModalWindowButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUISH3_ID), touchgfx::Bitmap(BITMAP_BLUISH3_ID));
    CloseModalWindowButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_G5P8));
    CloseModalWindowButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    CloseModalWindowButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    CloseModalWindowButton.setAction(buttonCallback);
    ModalWindow.add(CloseModalWindowButton);

    textArea3.setPosition(47, 113, 246, 25);
    textArea3.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textArea3.setLinespacing(0);
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1WI6));
    ModalWindow.add(textArea3);

    add(ModalWindow);
}

I2CViewBase::~I2CViewBase()
{

}

void I2CViewBase::setupScreen()
{

}

void I2CViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &BackButton)
    {
        //GoToSelectScreen
        //When BackButton clicked change screen to Select
        //Go to Select with no screen transition
        application().gotoSelectScreenNoTransition();
    }
    if (&src == &CountUpButton)
    {
        //CountUp
        //When CountUpButton clicked call virtual function
        //Call CountUp
        CountUp();
    }
    if (&src == &CountDownButton)
    {
        //CountDown
        //When CountDownButton clicked call virtual function
        //Call CountDown
        CountDown();
    }
    if (&src == &ManualReadButton)
    {
        //ManualRead
        //When ManualReadButton clicked call virtual function
        //Call ManualRead
        ManualRead();
    }
    if (&src == &ContinuousReadOnOff)
    {
        //ContinuousRead
        //When ContinuousReadOnOff clicked call virtual function
        //Call ContinuousRead
        ContinuousRead();
    }
    if (&src == &CloseModalWindowButton)
    {
        //CloseModalWindow
        //When CloseModalWindowButton clicked hide ModalWindow
        //Hide ModalWindow
        ModalWindow.setVisible(false);
        ModalWindow.invalidate();
    }
}
