/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/select_screen/SelectViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

SelectViewBase::SelectViewBase() :
    buttonCallback(this, &SelectViewBase::buttonCallbackHandler)
{
    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(box1);

    textArea1.setPosition(8, 0, 275, 49);
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 255, 0));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_R4FA));
    add(textArea1);

    RS232Button.setXY(73, 120);
    RS232Button.setBitmaps(touchgfx::Bitmap(BITMAP_OLIVE1_ID), touchgfx::Bitmap(BITMAP_LIGHTGGRAY1_ID));
    RS232Button.setLabelText(touchgfx::TypedText(T___SINGLEUSE_FFQV));
    RS232Button.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    RS232Button.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    RS232Button.setAction(buttonCallback);
    add(RS232Button);

    RS485Button.setXY(73, 240);
    RS485Button.setBitmaps(touchgfx::Bitmap(BITMAP_OLIVE1_ID), touchgfx::Bitmap(BITMAP_LIGHTGGRAY1_ID));
    RS485Button.setLabelText(touchgfx::TypedText(T___SINGLEUSE_RCO2));
    RS485Button.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    RS485Button.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    RS485Button.setAction(buttonCallback);
    add(RS485Button);

    CANButton.setXY(73, 360);
    CANButton.setBitmaps(touchgfx::Bitmap(BITMAP_OLIVE1_ID), touchgfx::Bitmap(BITMAP_LIGHTGGRAY1_ID));
    CANButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_M4G8));
    CANButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    CANButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    CANButton.setAction(buttonCallback);
    add(CANButton);

    I2CButton.setXY(316, 120);
    I2CButton.setBitmaps(touchgfx::Bitmap(BITMAP_LIGHTBLUE1_ID), touchgfx::Bitmap(BITMAP_GRAY1_ID));
    I2CButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_ROK2));
    I2CButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    I2CButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    I2CButton.setAction(buttonCallback);
    add(I2CButton);

    SPIButton.setXY(316, 240);
    SPIButton.setBitmaps(touchgfx::Bitmap(BITMAP_LIGHTBLUE1_ID), touchgfx::Bitmap(BITMAP_LIGHTGGRAY1_ID));
    SPIButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_DV4G));
    SPIButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    SPIButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    SPIButton.setAction(buttonCallback);
    add(SPIButton);

    GPIOButton.setXY(316, 360);
    GPIOButton.setBitmaps(touchgfx::Bitmap(BITMAP_ORANGE1_ID), touchgfx::Bitmap(BITMAP_LIGHTGGRAY1_ID));
    GPIOButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_H4RU));
    GPIOButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    GPIOButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPIOButton.setAction(buttonCallback);
    add(GPIOButton);

    CDCButton.setXY(557, 120);
    CDCButton.setBitmaps(touchgfx::Bitmap(BITMAP_RED1_ID), touchgfx::Bitmap(BITMAP_GRAY1_ID));
    CDCButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_HG7R));
    CDCButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    CDCButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    CDCButton.setAction(buttonCallback);
    add(CDCButton);

    HIDButton.setXY(557, 240);
    HIDButton.setBitmaps(touchgfx::Bitmap(BITMAP_RED1_ID), touchgfx::Bitmap(BITMAP_GRAY1_ID));
    HIDButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_C5BF));
    HIDButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    HIDButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    HIDButton.setAction(buttonCallback);
    add(HIDButton);

    modalWindow.setBackground(touchgfx::BitmapId(BITMAP_MY_MODAL_BACKGROUND_ID), 230, 120);
    modalWindow.setShadeColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    modalWindow.setShadeAlpha(150);
    modalWindow.hide();
    ModalBackButton.setXY(128, 165);
    ModalBackButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUISH3_ID), touchgfx::Bitmap(BITMAP_BLUISH3_ID));
    ModalBackButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_VQ0D));
    ModalBackButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ModalBackButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    ModalBackButton.setAction(buttonCallback);
    modalWindow.add(ModalBackButton);

    textArea2.setPosition(20, 68, 300, 31);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HO6Q));
    modalWindow.add(textArea2);

    add(modalWindow);

    INFOButton.setXY(557, 360);
    INFOButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE1_ID), touchgfx::Bitmap(BITMAP_GRAY1_ID));
    INFOButton.setLabelText(touchgfx::TypedText(T___SINGLEUSE_QRJO));
    INFOButton.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    INFOButton.setLabelColorPressed(touchgfx::Color::getColorFromRGB(0, 0, 0));
    INFOButton.setAction(buttonCallback);
    add(INFOButton);
}

SelectViewBase::~SelectViewBase()
{

}

void SelectViewBase::setupScreen()
{

}

void SelectViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &RS232Button)
    {
        //GoToRS232
        //When RS232Button clicked change screen to RS232
        //Go to RS232 with no screen transition
        application().gotoRS232ScreenNoTransition();
    }
    if (&src == &RS485Button)
    {
        //GoToRS485
        //When RS485Button clicked change screen to RS485
        //Go to RS485 with no screen transition
        application().gotoRS485ScreenNoTransition();
    }
    if (&src == &ModalBackButton)
    {
        //HideModalWindow
        //When ModalBackButton clicked hide modalWindow
        //Hide modalWindow
        modalWindow.setVisible(false);
        modalWindow.invalidate();
    }
    if (&src == &CANButton)
    {
        //GoToCAN
        //When CANButton clicked change screen to CAN
        //Go to CAN with no screen transition
        application().gotoCANScreenNoTransition();
    }
    if (&src == &CDCButton)
    {
        //GoToCDC
        //When CDCButton clicked change screen to CDC
        //Go to CDC with no screen transition
        application().gotoCDCScreenNoTransition();
    }
    if (&src == &HIDButton)
    {
        //ShowModalWondowHID
        //When HIDButton clicked show modalWindow
        //Show modalWindow
        modalWindow.setVisible(true);
        modalWindow.invalidate();
    }
    if (&src == &SPIButton)
    {
        //ShowModalWindowSPI
        //When SPIButton clicked show modalWindow
        //Show modalWindow
        modalWindow.setVisible(true);
        modalWindow.invalidate();
    }
    if (&src == &I2CButton)
    {
        //GoToI2c
        //When I2CButton clicked change screen to I2C
        //Go to I2C with no screen transition
        application().gotoI2CScreenNoTransition();
    }
    if (&src == &GPIOButton)
    {
        //GoToGPIO
        //When GPIOButton clicked change screen to GPIO
        //Go to GPIO with no screen transition
        application().gotoGPIOScreenNoTransition();
    }
    if (&src == &INFOButton)
    {
        //GoToINFO
        //When INFOButton clicked change screen to INFO
        //Go to INFO with no screen transition
        application().gotoINFOScreenNoTransition();
    }
}
