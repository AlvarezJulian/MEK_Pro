/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef I2CVIEWBASE_HPP
#define I2CVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/i2c_screen/I2CPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/ModalWindow.hpp>

class I2CViewBase : public touchgfx::View<I2CPresenter>
{
public:
    I2CViewBase();
    virtual ~I2CViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void CountUp()
    {
        // Override and implement this function in I2C
    }
    virtual void CountDown()
    {
        // Override and implement this function in I2C
    }
    virtual void ManualRead()
    {
        // Override and implement this function in I2C
    }
    virtual void ContinuousRead()
    {
        // Override and implement this function in I2C
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::ButtonWithLabel BackButton;
    touchgfx::TextArea textArea1;
    touchgfx::Button CountUpButton;
    touchgfx::Button CountDownButton;
    touchgfx::ButtonWithLabel ManualReadButton;
    touchgfx::ToggleButton ContinuousReadOnOff;
    touchgfx::TextArea textArea2;
    touchgfx::TextArea ContReadText;
    touchgfx::Image image1;
    touchgfx::TextAreaWithOneWildcard ReadTemperature;
    touchgfx::TextAreaWithOneWildcard SamplesPerSecond;
    touchgfx::ModalWindow ModalWindow;
    touchgfx::ButtonWithLabel CloseModalWindowButton;
    touchgfx::TextArea textArea3;

    /*
     * Wildcard Buffers
     */
    static const uint16_t READTEMPERATURE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ReadTemperatureBuffer[READTEMPERATURE_SIZE];
    static const uint16_t SAMPLESPERSECOND_SIZE = 10;
    touchgfx::Unicode::UnicodeChar SamplesPerSecondBuffer[SAMPLESPERSECOND_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<I2CViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // I2CVIEWBASE_HPP
